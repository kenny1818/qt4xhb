/*

  Qt4xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 4

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QItemSelectionModelSlots.h"

static QItemSelectionModelSlots * s = NULL;

QItemSelectionModelSlots::QItemSelectionModelSlots(QObject *parent) : QObject(parent)
{
}

QItemSelectionModelSlots::~QItemSelectionModelSlots()
{
}
void QItemSelectionModelSlots::currentChanged( const QModelIndex & current, const QModelIndex & previous )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "currentChanged(QModelIndex,QModelIndex)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pcurrent = hb_itemPutPtr( NULL, (QModelIndex *) &current );
    PHB_ITEM pprevious = hb_itemPutPtr( NULL, (QModelIndex *) &previous );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pcurrent, pprevious );
    hb_itemRelease( psender );
    hb_itemRelease( pcurrent );
    hb_itemRelease( pprevious );
  }
}
void QItemSelectionModelSlots::currentColumnChanged( const QModelIndex & current, const QModelIndex & previous )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "currentColumnChanged(QModelIndex,QModelIndex)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pcurrent = hb_itemPutPtr( NULL, (QModelIndex *) &current );
    PHB_ITEM pprevious = hb_itemPutPtr( NULL, (QModelIndex *) &previous );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pcurrent, pprevious );
    hb_itemRelease( psender );
    hb_itemRelease( pcurrent );
    hb_itemRelease( pprevious );
  }
}
void QItemSelectionModelSlots::currentRowChanged( const QModelIndex & current, const QModelIndex & previous )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "currentRowChanged(QModelIndex,QModelIndex)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pcurrent = hb_itemPutPtr( NULL, (QModelIndex *) &current );
    PHB_ITEM pprevious = hb_itemPutPtr( NULL, (QModelIndex *) &previous );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pcurrent, pprevious );
    hb_itemRelease( psender );
    hb_itemRelease( pcurrent );
    hb_itemRelease( pprevious );
  }
}
void QItemSelectionModelSlots::selectionChanged( const QItemSelection & selected, const QItemSelection & deselected )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "selectionChanged(QItemSelection,QItemSelection)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pselected = hb_itemPutPtr( NULL, (QItemSelection *) &selected );
    PHB_ITEM pdeselected = hb_itemPutPtr( NULL, (QItemSelection *) &deselected );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pselected, pdeselected );
    hb_itemRelease( psender );
    hb_itemRelease( pselected );
    hb_itemRelease( pdeselected );
  }
}

HB_FUNC( QITEMSELECTIONMODEL_ONCURRENTCHANGED )
{
  if( s == NULL )
  {
    s = new QItemSelectionModelSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "currentChanged(QModelIndex,QModelIndex)", "currentChanged(QModelIndex,QModelIndex)" ) );
}

HB_FUNC( QITEMSELECTIONMODEL_ONCURRENTCOLUMNCHANGED )
{
  if( s == NULL )
  {
    s = new QItemSelectionModelSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "currentColumnChanged(QModelIndex,QModelIndex)", "currentColumnChanged(QModelIndex,QModelIndex)" ) );
}

HB_FUNC( QITEMSELECTIONMODEL_ONCURRENTROWCHANGED )
{
  if( s == NULL )
  {
    s = new QItemSelectionModelSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "currentRowChanged(QModelIndex,QModelIndex)", "currentRowChanged(QModelIndex,QModelIndex)" ) );
}

HB_FUNC( QITEMSELECTIONMODEL_ONSELECTIONCHANGED )
{
  if( s == NULL )
  {
    s = new QItemSelectionModelSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "selectionChanged(QItemSelection,QItemSelection)", "selectionChanged(QItemSelection,QItemSelection)" ) );
}

