/*

  Qt4xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 4

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QAbstractVideoSurfaceSlots.h"

static QAbstractVideoSurfaceSlots * s = NULL;

QAbstractVideoSurfaceSlots::QAbstractVideoSurfaceSlots(QObject *parent) : QObject(parent)
{
}

QAbstractVideoSurfaceSlots::~QAbstractVideoSurfaceSlots()
{
}
void QAbstractVideoSurfaceSlots::activeChanged( bool active )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "activeChanged(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pactive = hb_itemPutL( NULL, active );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pactive );
    hb_itemRelease( psender );
    hb_itemRelease( pactive );
  }
}
void QAbstractVideoSurfaceSlots::surfaceFormatChanged( const QVideoSurfaceFormat & format )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "surfaceFormatChanged(QVideoSurfaceFormat)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pformat = hb_itemPutPtr( NULL, (QVideoSurfaceFormat *) &format );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pformat );
    hb_itemRelease( psender );
    hb_itemRelease( pformat );
  }
}
void QAbstractVideoSurfaceSlots::supportedFormatsChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "supportedFormatsChanged()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}

HB_FUNC( QABSTRACTVIDEOSURFACE_ONACTIVECHANGED )
{
  if( s == NULL )
  {
    s = new QAbstractVideoSurfaceSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "activeChanged(bool)", "activeChanged(bool)" ) );
}

HB_FUNC( QABSTRACTVIDEOSURFACE_ONSURFACEFORMATCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstractVideoSurfaceSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "surfaceFormatChanged(QVideoSurfaceFormat)", "surfaceFormatChanged(QVideoSurfaceFormat)" ) );
}

HB_FUNC( QABSTRACTVIDEOSURFACE_ONSUPPORTEDFORMATSCHANGED )
{
  if( s == NULL )
  {
    s = new QAbstractVideoSurfaceSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "supportedFormatsChanged()", "supportedFormatsChanged()" ) );
}

