/*

  Qt4xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 4

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QFtpSlots.h"

static QFtpSlots * s = NULL;

QFtpSlots::QFtpSlots(QObject *parent) : QObject(parent)
{
}

QFtpSlots::~QFtpSlots()
{
}
void QFtpSlots::commandFinished( int id, bool error )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "commandFinished(int,bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pid = hb_itemPutNI( NULL, id );
    PHB_ITEM perror = hb_itemPutL( NULL, error );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pid, perror );
    hb_itemRelease( psender );
    hb_itemRelease( pid );
    hb_itemRelease( perror );
  }
}
void QFtpSlots::commandStarted( int id )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "commandStarted(int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pid = hb_itemPutNI( NULL, id );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pid );
    hb_itemRelease( psender );
    hb_itemRelease( pid );
  }
}
void QFtpSlots::dataTransferProgress( qint64 done, qint64 total )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "dataTransferProgress(qint64,qint64)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pdone = hb_itemPutNLL( NULL, done );
    PHB_ITEM ptotal = hb_itemPutNLL( NULL, total );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pdone, ptotal );
    hb_itemRelease( psender );
    hb_itemRelease( pdone );
    hb_itemRelease( ptotal );
  }
}
void QFtpSlots::done( bool error )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "done(bool)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM perror = hb_itemPutL( NULL, error );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, perror );
    hb_itemRelease( psender );
    hb_itemRelease( perror );
  }
}
void QFtpSlots::listInfo( const QUrlInfo & i )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "listInfo(QUrlInfo)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pi = hb_itemPutPtr( NULL, (QUrlInfo *) &i );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pi );
    hb_itemRelease( psender );
    hb_itemRelease( pi );
  }
}
void QFtpSlots::rawCommandReply( int replyCode, const QString & detail )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "rawCommandReply(int,QString)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM preplyCode = hb_itemPutNI( NULL, replyCode );
    PHB_ITEM pdetail = hb_itemPutC( NULL, QSTRINGTOSTRING(detail) );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, preplyCode, pdetail );
    hb_itemRelease( psender );
    hb_itemRelease( preplyCode );
    hb_itemRelease( pdetail );
  }
}
void QFtpSlots::readyRead()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "readyRead()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void QFtpSlots::stateChanged( int state )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "stateChanged(int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pstate = hb_itemPutNI( NULL, state );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pstate );
    hb_itemRelease( psender );
    hb_itemRelease( pstate );
  }
}

HB_FUNC( QFTP_ONCOMMANDFINISHED )
{
  if( s == NULL )
  {
    s = new QFtpSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "commandFinished(int,bool)", "commandFinished(int,bool)" ) );
}

HB_FUNC( QFTP_ONCOMMANDSTARTED )
{
  if( s == NULL )
  {
    s = new QFtpSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "commandStarted(int)", "commandStarted(int)" ) );
}

HB_FUNC( QFTP_ONDATATRANSFERPROGRESS )
{
  if( s == NULL )
  {
    s = new QFtpSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "dataTransferProgress(qint64,qint64)", "dataTransferProgress(qint64,qint64)" ) );
}

HB_FUNC( QFTP_ONDONE )
{
  if( s == NULL )
  {
    s = new QFtpSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "done(bool)", "done(bool)" ) );
}

HB_FUNC( QFTP_ONLISTINFO )
{
  if( s == NULL )
  {
    s = new QFtpSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "listInfo(QUrlInfo)", "listInfo(QUrlInfo)" ) );
}

HB_FUNC( QFTP_ONRAWCOMMANDREPLY )
{
  if( s == NULL )
  {
    s = new QFtpSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "rawCommandReply(int,QString)", "rawCommandReply(int,QString)" ) );
}

HB_FUNC( QFTP_ONREADYREAD )
{
  if( s == NULL )
  {
    s = new QFtpSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "readyRead()", "readyRead()" ) );
}

HB_FUNC( QFTP_ONSTATECHANGED )
{
  if( s == NULL )
  {
    s = new QFtpSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "stateChanged(int)", "stateChanged(int)" ) );
}

