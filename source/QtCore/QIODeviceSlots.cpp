/*

  Qt4xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 4

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QIODeviceSlots.h"

static QIODeviceSlots * s = NULL;

QIODeviceSlots::QIODeviceSlots(QObject *parent) : QObject(parent)
{
}

QIODeviceSlots::~QIODeviceSlots()
{
}
void QIODeviceSlots::aboutToClose()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "aboutToClose()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void QIODeviceSlots::bytesWritten( qint64 bytes )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "bytesWritten(qint64)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pbytes = hb_itemPutNLL( NULL, bytes );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pbytes );
    hb_itemRelease( psender );
    hb_itemRelease( pbytes );
  }
}
void QIODeviceSlots::readChannelFinished()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "readChannelFinished()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void QIODeviceSlots::readyRead()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "readyRead()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}

HB_FUNC( QIODEVICE_ONABOUTTOCLOSE )
{
  if( s == NULL )
  {
    s = new QIODeviceSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "aboutToClose()", "aboutToClose()" ) );
}

HB_FUNC( QIODEVICE_ONBYTESWRITTEN )
{
  if( s == NULL )
  {
    s = new QIODeviceSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "bytesWritten(qint64)", "bytesWritten(qint64)" ) );
}

HB_FUNC( QIODEVICE_ONREADCHANNELFINISHED )
{
  if( s == NULL )
  {
    s = new QIODeviceSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "readChannelFinished()", "readChannelFinished()" ) );
}

HB_FUNC( QIODEVICE_ONREADYREAD )
{
  if( s == NULL )
  {
    s = new QIODeviceSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "readyRead()", "readyRead()" ) );
}

