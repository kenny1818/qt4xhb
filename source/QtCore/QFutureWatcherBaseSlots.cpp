/*

  Qt4xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 4

  Copyright (C) 2018 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "QFutureWatcherBaseSlots.h"

static QFutureWatcherBaseSlots * s = NULL;

QFutureWatcherBaseSlots::QFutureWatcherBaseSlots(QObject *parent) : QObject(parent)
{
}

QFutureWatcherBaseSlots::~QFutureWatcherBaseSlots()
{
}
void QFutureWatcherBaseSlots::started()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "started()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void QFutureWatcherBaseSlots::finished()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "finished()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void QFutureWatcherBaseSlots::canceled()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "canceled()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void QFutureWatcherBaseSlots::paused()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "paused()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void QFutureWatcherBaseSlots::resumed()
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "resumed()" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 1, psender );
    hb_itemRelease( psender );
  }
}
void QFutureWatcherBaseSlots::resultReadyAt( int resultIndex )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "resultReadyAt(int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM presultIndex = hb_itemPutNI( NULL, resultIndex );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, presultIndex );
    hb_itemRelease( psender );
    hb_itemRelease( presultIndex );
  }
}
void QFutureWatcherBaseSlots::resultsReadyAt( int beginIndex, int endIndex )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "resultsReadyAt(int,int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pbeginIndex = hb_itemPutNI( NULL, beginIndex );
    PHB_ITEM pendIndex = hb_itemPutNI( NULL, endIndex );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pbeginIndex, pendIndex );
    hb_itemRelease( psender );
    hb_itemRelease( pbeginIndex );
    hb_itemRelease( pendIndex );
  }
}
void QFutureWatcherBaseSlots::progressRangeChanged( int minimum, int maximum )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "progressRangeChanged(int,int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pminimum = hb_itemPutNI( NULL, minimum );
    PHB_ITEM pmaximum = hb_itemPutNI( NULL, maximum );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 3, psender, pminimum, pmaximum );
    hb_itemRelease( psender );
    hb_itemRelease( pminimum );
    hb_itemRelease( pmaximum );
  }
}
void QFutureWatcherBaseSlots::progressValueChanged( int progressValue )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "progressValueChanged(int)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pprogressValue = hb_itemPutNI( NULL, progressValue );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pprogressValue );
    hb_itemRelease( psender );
    hb_itemRelease( pprogressValue );
  }
}
void QFutureWatcherBaseSlots::progressTextChanged( const QString & progressText )
{
  QObject *object = qobject_cast<QObject *>(sender());
  PHB_ITEM cb = Signals_return_codeblock( object, "progressTextChanged(QString)" );
  if( cb )
  {
    PHB_ITEM psender = hb_itemPutPtr( NULL, (QObject *) object );
    PHB_ITEM pprogressText = hb_itemPutC( NULL, QSTRINGTOSTRING(progressText) );
    hb_vmEvalBlockV( (PHB_ITEM) cb, 2, psender, pprogressText );
    hb_itemRelease( psender );
    hb_itemRelease( pprogressText );
  }
}

HB_FUNC( QFUTUREWATCHERBASE_ONSTARTED )
{
  if( s == NULL )
  {
    s = new QFutureWatcherBaseSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "started()", "started()" ) );
}

HB_FUNC( QFUTUREWATCHERBASE_ONFINISHED )
{
  if( s == NULL )
  {
    s = new QFutureWatcherBaseSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "finished()", "finished()" ) );
}

HB_FUNC( QFUTUREWATCHERBASE_ONCANCELED )
{
  if( s == NULL )
  {
    s = new QFutureWatcherBaseSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "canceled()", "canceled()" ) );
}

HB_FUNC( QFUTUREWATCHERBASE_ONPAUSED )
{
  if( s == NULL )
  {
    s = new QFutureWatcherBaseSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "paused()", "paused()" ) );
}

HB_FUNC( QFUTUREWATCHERBASE_ONRESUMED )
{
  if( s == NULL )
  {
    s = new QFutureWatcherBaseSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "resumed()", "resumed()" ) );
}

HB_FUNC( QFUTUREWATCHERBASE_ONRESULTREADYAT )
{
  if( s == NULL )
  {
    s = new QFutureWatcherBaseSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "resultReadyAt(int)", "resultReadyAt(int)" ) );
}

HB_FUNC( QFUTUREWATCHERBASE_ONRESULTSREADYAT )
{
  if( s == NULL )
  {
    s = new QFutureWatcherBaseSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "resultsReadyAt(int,int)", "resultsReadyAt(int,int)" ) );
}

HB_FUNC( QFUTUREWATCHERBASE_ONPROGRESSRANGECHANGED )
{
  if( s == NULL )
  {
    s = new QFutureWatcherBaseSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "progressRangeChanged(int,int)", "progressRangeChanged(int,int)" ) );
}

HB_FUNC( QFUTUREWATCHERBASE_ONPROGRESSVALUECHANGED )
{
  if( s == NULL )
  {
    s = new QFutureWatcherBaseSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "progressValueChanged(int)", "progressValueChanged(int)" ) );
}

HB_FUNC( QFUTUREWATCHERBASE_ONPROGRESSTEXTCHANGED )
{
  if( s == NULL )
  {
    s = new QFutureWatcherBaseSlots( QCoreApplication::instance() );
  }

  hb_retl( Signals_connection_disconnection( s, "progressTextChanged(QString)", "progressTextChanged(QString)" ) );
}

